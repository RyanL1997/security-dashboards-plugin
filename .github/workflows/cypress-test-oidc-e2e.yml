name: Snapshot based E2E OIDC tests workflow
on:
  pull_request:
    branches: [ '**' ]
env:
  OPENSEARCJ_VERSION: '3.0.0'
  KEYCLOAK_VERSION: '21.0.1'
jobs:
  tests:
    name: Run Cypress E2E tests
    runs-on: ubuntu-latest
    env:
      # prevents extra Cypress installation progress messages
      CI: 1
      # avoid warnings like "tput: No value for $TERM and no -T specified"
      TERM: xterm
    steps:
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Get and run Keycloak
        run: |
          echo "Downloading Keycloak ${{ env.KEYCLOAK_VERSION }}"
          wget https://github.com/keycloak/keycloak/releases/download/${{ env.KEYCLOAK_VERSION }}/keycloak-${{ env.KEYCLOAK_VERSION }}.tar.gz
          echo "Unpacking Keycloak"
          tar -xzf keycloak-${{ env.KEYCLOAK_VERSION }}.tar.gz
          export KEYCLOAK_ADMIN=admin
          export KEYCLOAK_ADMIN_PASSWORD=admin
          cd keycloak-${{ env.KEYCLOAK_VERSION }}/bin
          chmod +x kc.sh
          echo "Starting keycloak"
          ./kc.sh start-dev --http-enabled=true --hostname-strict-https=false --http-host=localhost --http-relative-path /auth --health-enabled=true &
          timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:8080/auth/health)" != "200" ]]; do sleep 5; done'
          chmod +x kcadm.sh
          echo "Creating client"
          ./kcadm.sh config credentials --server http://localhost:8080/auth --realm master --user admin --password admin
          CID=$(./kcadm.sh create clients -r master -s clientId=opensearch -s 'redirectUris=["http://localhost:5603/auth/openid/login", "http://localhost:5601", "http://localhost:5601/auth/openid/login"]' -i)
          ./kcadm.sh get clients/$CID/installation/providers/keycloak-oidc-keycloak-json > tmp
          echo "Getting client secret for dashboards configuration purpose"
          echo "KEYCLOAK_CLIENT_SECRET=$(grep -o '"secret" : "[^"]*' tmp | grep -o '[^"]*$')" >> $GITHUB_ENV
          echo "Creating client mapper"
          ./kcadm.sh create clients/$CID/protocol-mappers/models  -r master -s 'config."id.token.claim"=true' -s 'config."multivalued"=true' -s 'config."claim.name"="roles"' -s 'config."userinfo.token.claim"=true' -s 'config."access.token.claim"=true' -s 'name=rolemapper' -s 'protocolMapper=oidc-usermodel-realm-role-mapper' -s "protocol=openid-connect"

      - name: Get and run OpenSearch
        run: |
          echo "Downloading OpenSearch ${{ env.OPENSEARCH_VERSION }}"
          wget https://artifacts.opensearch.org/releases/bundle/opensearch/${{ env.OPENSEARCH_VERSION }}/opensearch-${{ env.OPENSEARCH_VERSION }}-linux-x64.tar.gz
          echo "Unpacking OpenSearch"
          tar -xzf opensearch-${{ env.OPENSEARCH_VERSION }}-linux-x64.tar.gz
          cd opensearch-${{ env.OPENSEARCH_VERSION }}
          
          echo "Injecting OIDC configuration"
          cd config/opensearch-security/
          wget -O yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod +x yq
          yq -i ".config.dynamic.authc.openid_auth_domain.http_enabled = true" config.yml
          yq -i ".config.dynamic.authc.openid_auth_domain.transport_enabled = true" config.yml
          yq -i ".config.dynamic.authc.openid_auth_domain.order = 1" config.yml
          yq -i ".config.dynamic.authc.openid_auth_domain.http_authenticator.type = \"openid\"" config.yml
          yq -i ".config.dynamic.authc.openid_auth_domain.http_authenticator.challenge = false" config.yml
          yq -i ".config.dynamic.authc.openid_auth_domain.http_authenticator.config.subject_key = \"preferred_username\"" config.yml
          yq -i ".config.dynamic.authc.openid_auth_domain.http_authenticator.config.roles_key = \"roles\"" config.yml
          yq -i ".config.dynamic.authc.openid_auth_domain.http_authenticator.config.openid_connect_url = \"http://localhost:8080/auth/realms/master/.well-known/openid-configuration\"" config.yml
          yq -i ".config.dynamic.authc.openid_auth_domain.authentication_backend.type = \"noop\"" config.yml
          echo "Installing demo configuration"
          cd ../../plugins/opensearch-security/tools
          chmod +x install_demo_configuration.sh
          ./install_demo_configuration.sh -y

          echo "Starting OpenSearch"
          ../../../bin/opensearch &
          timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' https://localhost:9200 -ku admin:admin)" != "503" ]]; do sleep 5; done'
          echo "Setting up certificates"
          chmod +x securityadmin.sh
          ./securityadmin.sh -cd ../../../config/opensearch-security/ -icl -nhnv \
          -cacert ../../../config/root-ca.pem \
          -cert ../../../config/kirk.pem \
          -key ../../../config/kirk-key.pem
          timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' https://localhost:9200 -ku admin:admin)" != "200" ]]; do sleep 5; done'

      # Use existing action for osd bootstrap
      - name: Run Dashboard with Security Dashboards Plugin
        uses: ./.github/actions/install-dashboards
        with:
          plugin_name: security-dashboards-plugin

      # Configure the Dashboard for OIDC setup
      - name: Configure and Run OpenSearch Dashboards with Cypress Test Cases
        run: |
          cd ./OpenSearch-Dashboards
          echo 'server.host: "0.0.0.0"' >> ./config/opensearch_dashboards.yml
          echo 'opensearch.hosts: ["https://localhost:9200"]' >> ./config/opensearch_dashboards.yml
          echo 'opensearch.ssl.verificationMode: none' >> ./config/opensearch_dashboards.yml
          echo 'opensearch.username: "kibanaserver"' >> ./config/opensearch_dashboards.yml
          echo 'opensearch.password: "kibanaserver"' >> ./config/opensearch_dashboards.yml
          echo 'opensearch.requestHeadersWhitelist: [ authorization,securitytenant ]' >> ./config/opensearch_dashboards.yml
          echo 'opensearch_security.multitenancy.enabled: true' >> ./config/opensearch_dashboards.yml
          echo 'opensearch_security.multitenancy.tenants.preferred: ["Private", "Global"]' >> ./config/opensearch_dashboards.yml
          echo 'opensearch_security.readonly_mode.roles: ["kibana_read_only"]' >> ./config/opensearch_dashboards.yml
          echo 'opensearch_security.cookie.secure: false' >> ./config/opensearch_dashboards.yml
          echo "opensearch_security.openid.connect_url: \"http://localhost:8080/auth/realms/master/.well-known/openid-configuration\"" >> ./config/opensearch_dashboards.yml
          echo "opensearch_security.openid.client_id: \"opensearch\"" >> ./config/opensearch_dashboards.yml
          echo "opensearch_security.openid.client_secret: \"${{ env.KEYCLOAK_CLIENT_SECRET }}\"">> ./config/opensearch_dashboards.yml
          echo "opensearch_security.auth.type: [\"openid\"]" >> ./config/opensearch_dashboards.yml
          echo "opensearch_security.auth.multiple_auth_enabled: true" >> ./config/opensearch_dashboards.yml
          echo "opensearch_security.ui.openid.login.buttonname: \"OIDC\"" >> ./config/opensearch_dashboards.yml
          echo "home.disableWelcomeScreen: true" >> ./config/opensearch_dashboards.yml
          nohup yarn start --no-base-path --no-watch &
          sleep 500
          cd ./plugins/security-dashboards-plugin
          npm install cypress --save-dev
          yarn cypress:run --browser chrome --spec 'cypress/e2e/oidc/*.js'
